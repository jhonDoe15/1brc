package main

import (
	"bufio"
	"fmt"
	"github.com/dolthub/swiss"
	"io"
	"log"
	"math"
	"os"
	//"runtime/pprof"
	"strconv"
	"strings"
	"sync"
	"time"
)

type stationAggregatedResult struct {
	min   int8
	max   int8
	sum   int64
	count int64
}

func main() {
	//// Start profiling
	//f, err := os.Create("1brc-12.prof")
	//if err != nil {
	//
	//	fmt.Println(err)
	//	return
	//
	//}
	//err = pprof.StartCPUProfile(f)
	//if err != nil {
	//	return
	//}
	//defer pprof.StopCPUProfile()

	batchFinalMaps := make(chan *swiss.Map[string, stationAggregatedResult], 150)
	wg := sync.WaitGroup{}

	start := time.Now()

	f, err := os.Open("./measurements.txt")
	if err != nil {
		log.Fatal("Error opening measurements file, failing ðŸ˜µ")
	}
	defer func(f *os.File) {
		err := f.Close()
		if err != nil {
			log.Fatal("Error closing measurements file, failing ðŸ˜µ")
		}
	}(f)
	r := bufio.NewReader(f)

	nr := int64(0)
	buf := make([]byte, 0, int(math.Pow(2, 27)))
	batchCount := 0
	wasLastCharNewline := true
	wg.Add(1)
	for {
		n, err := r.Read(buf[:cap(buf)])
		buf = buf[:n] // if less than buf size is left to read
		if n == 0 {
			if err == nil {
				continue
			}
			if err == io.EOF {
				break
			}
			log.Fatal("reached EOF, failing ðŸ˜µ")
		}

		wg.Add(1)

		// Do something with buf
		nr += int64(len(buf))
		fileBatch := string(buf)
		if !wasLastCharNewline {
			newlineIndex := getNextNewlineIndex(fileBatch)
			fileBatch = fileBatch[newlineIndex:]
		}

		wasLastCharNewline = fileBatch[len(fileBatch)-1] == '\n'

		endNewlineIndex := getEndNewlineIndex(fileBatch)
		fileBatch = fileBatch[:endNewlineIndex]

		go processFileSection(fileBatch, batchFinalMaps, &wg)

		if err != nil && err != io.EOF {
			log.Fatal("all hell broke loose, failing ðŸ˜µ")
		} else {
			batchCount++
		}
	}
	wg.Done()
	wg.Wait()

	log.Print("merging all batches results")
	end := time.Now()
	fmt.Println("")
	fmt.Printf("Execution time %v", end.Sub(start))
	mergeToSingleMap(batchFinalMaps)
	end = time.Now()
	fmt.Println("")
	fmt.Printf("Execution time %v", end.Sub(start))

}

func getEndNewlineIndex(fileBatch string) int {
	for i := len(fileBatch) - 1; i >= 0; i-- {
		if fileBatch[i] == 10 { // "\n"
			return i
		}
	}
	return -1
}

func getNextNewlineIndex(fileBatch string) int {
	for i := 0; i < len(fileBatch); i++ {
		if fileBatch[i] == 10 { // "\n"
			return i
		}
	}
	return -1
}

func mergeToSingleMap(allMaps chan *swiss.Map[string, stationAggregatedResult]) {
	finalMap := <-allMaps
	for i := 0; i < len(allMaps); i++ {
		aMap := <-allMaps
		aMap.Iter(func(k string, v stationAggregatedResult) (stop bool) {
			val, entryFound := finalMap.Get(k)
			if entryFound {
				updateResult(&val, v)
			} else {
				val = stationAggregatedResult{v.max, v.min, v.sum, 1}
				finalMap.Put(k, val)
			}
			return false // continue
		})
	}
	mapSize := finalMap.Capacity()

	var output strings.Builder
	output.WriteString("{")
	cnt := 1
	finalMap.Iter(func(stationName string, aggResult stationAggregatedResult) (stop bool) {
		output.WriteString(stationName)
		output.WriteString("=")
		output.WriteString(fmt.Sprintf("%d", aggResult.min))
		output.WriteString("/")
		output.WriteString(fmt.Sprintf("%.1f", float64(aggResult.sum/aggResult.count)))
		output.WriteString("/")
		output.WriteString(fmt.Sprintf("%d", aggResult.max))
		if cnt < mapSize {
			output.WriteString(", ")
		}
		cnt++
		return false // continue
	})
	output.WriteString("}")
	fmt.Print(output.String())
}

func processFileSection(fileBuffer string, results chan *swiss.Map[string, stationAggregatedResult], swg *sync.WaitGroup) {
	defer swg.Done()

	lines := strings.Split(fileBuffer, "\n")
	lineCount := len(lines)
	//chunkMap := swiss.NewMap[string, *stationAggregatedResult](uint32(lineCount))

	//cpuCount := runtime.NumCPU()
	//batchSize := lineCount / cpuCount // 40_000
	log.Printf("processing %s lines\n", Format(int64(lineCount)))
	//batches := make([][]string, 0, (len(lines)+batchSize-1)/batchSize)
	//
	//for batchSize < len(lines) {
	//	lines, batches = lines[batchSize:], append(batches, lines[0:batchSize:batchSize])
	//}
	//
	//batches = append(batches, lines)
	//aggregationResults1 := make(chan *swiss.Map[string, stationAggregatedResult], len(batches))

	//chunkMap := processChunkLines(lines)
	var chunkMap = swiss.NewMap[string, stationAggregatedResult](uint32(lineCount))

	for _, line := range lines {
		measurement, station, ok := getStationAndValue(line)
		if ok {
			insertEntryInBatch(chunkMap, station, measurement)
		}
	}
	fmt.Println("finished processing chunk")
	results <- chunkMap
}

func insertEntryInBatch(c2 *swiss.Map[string, stationAggregatedResult], station string, measurement int8) {
	val, ok := c2.Get(station)
	if ok {
		updateResultInBatch(&val, measurement)
	} else {
		val = stationAggregatedResult{measurement, measurement, int64(measurement), 1}
		c2.Put(station, val)
	}
	//c2.Put(station, val)
}

func processChunkLines(chunkLines []string) *swiss.Map[string, stationAggregatedResult] {
	var batchAggResult = swiss.NewMap[string, stationAggregatedResult](uint32(len(chunkLines)))

	for _, line := range chunkLines {
		measurement, station, ok := getStationAndValue(line)
		if ok {
			insertEntryInBatch(batchAggResult, station, measurement)
		}
	}
	return batchAggResult
}

func getStationAndValue(line string) (int8, string, bool) {
	var measurement int8
	semiColonIdx := getSemiColonIndex(line)
	if semiColonIdx == -1 {
		return 0, "", false
	}
	var station = line[0:semiColonIdx]
	var negativeNumber = false
	// tlv;9.2 idx=3
	station = line[0:semiColonIdx]

	if line[semiColonIdx+1] == 45 { // "-"
		negativeNumber = true
	}

	measurement = getMeasurement(line, negativeNumber, measurement, semiColonIdx)

	return measurement, station, true
}

func getSemiColonIndex(line string) int {
	sLen := len(line)
	var startIdx = 0
	if sLen > 5 {
		startIdx = sLen - 6
	}
	for i := startIdx; i < sLen; i++ {
		if line[i] == 59 {
			return i
		}
	}
	return -1
}

func getMeasurement(line string, negativeNumber bool, measurement int8, semiColonIdx int) int8 {
	numberCharCount := len(line) - 1 - semiColonIdx
	// number options
	// negative 4		5
	//			-1.7	-11.7
	//			3		4
	// positive 1.7		11.7
	// vv;1.0

	if negativeNumber {
		if numberCharCount == 4 {
			measurement = int8(line[semiColonIdx+2] - 48)
		} else {
			measurement = int8((line[semiColonIdx+2]-48)*10 + line[semiColonIdx+3] - 48)
		}
		measurement *= -1
	} else {
		if numberCharCount == 3 {
			measurement = int8(line[semiColonIdx+1] - 48)
		} else {
			measurement = int8((line[semiColonIdx+1]-48)*10 + line[semiColonIdx+2] - 48)
		}
		measurement += 1
	}
	return measurement
}

func updateResult(val *stationAggregatedResult, entry stationAggregatedResult) {
	val.min = intMin(val.min, entry.min)
	val.max = intMax(val.max, entry.max)
	val.sum += entry.sum
	val.count += entry.count
}

func updateResultInBatch(val *stationAggregatedResult, measurement int8) {
	val.min = intMin(val.min, measurement)
	val.max = intMax(val.max, measurement)
	val.sum += int64(measurement)
	val.count += 1
}

func intMin(currentMin int8, measurement int8) int8 {
	if currentMin < measurement {
		return currentMin
	}

	return measurement
}

func intMax(currentMax int8, measurement int8) int8 {
	if currentMax > measurement {
		return currentMax
	}

	return measurement
}

func Format(n int64) string {
	in := strconv.FormatInt(n, 10)
	numOfDigits := len(in)
	if n < 0 {
		numOfDigits-- // First character is the - sign (not a digit)
	}
	numOfCommas := (numOfDigits - 1) / 3

	out := make([]byte, len(in)+numOfCommas)
	if n < 0 {
		in, out[0] = in[1:], '-'
	}

	for i, j, k := len(in)-1, len(out)-1, 0; ; i, j = i-1, j-1 {
		out[j] = in[i]
		if i == 0 {
			return string(out)
		}
		if k++; k == 3 {
			j, k = j-1, 0
			out[j] = ','
		}
	}
}
