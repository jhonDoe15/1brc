package main

import (
	"fmt"
	"log"
	"math"
	"os"
	"runtime"
	"runtime/pprof"
	"strconv"
	"strings"
	"sync"
	"time"
)

type stationAggregatedResult struct {
	min   int8
	max   int8
	sum   int64
	count int64
}

// var bufferChan chan string
// var processedLines chan processedLine
var aggregationResults chan map[string]stationAggregatedResult

func main() {
	// Start profiling
	f, err := os.Create("1brc-9.prof")
	if err != nil {

		fmt.Println(err)
		return

	}
	err = pprof.StartCPUProfile(f)
	if err != nil {
		return
	}
	defer pprof.StopCPUProfile()

	start := time.Now()
	content, err := os.ReadFile("./measurements.txt")
	if err != nil {
		log.Print("Error opening measurements file, failing ðŸ˜µ")
	}

	entireFileLines := strings.Split(string(content), "\n")
	mainLineCount := len(entireFileLines)

	maxLinesToProcessAtOnce := 50_000_000
	mainBatchSize := maxLinesToProcessAtOnce // mainLineCount / maxLinesToProcessAtOnce
	log.Printf("Using %s as main batch size\n", Format(int64(mainBatchSize)))
	mainBatches := make([][]string, 0, (len(entireFileLines)+mainBatchSize-1)/mainBatchSize)

	for mainBatchSize < len(entireFileLines) {
		entireFileLines, mainBatches = entireFileLines[mainBatchSize:], append(mainBatches, entireFileLines[0:mainBatchSize:mainBatchSize])
	}
	mainBatchesCount := len(mainBatches)
	allMaps := make([]map[string]stationAggregatedResult, mainBatchesCount)

	mainBatches = append(mainBatches, entireFileLines)
	log.Print("sending main batches to be processed")
	for i := 0; i < mainBatchesCount; i++ {
		allMaps[i] = processFileSection(mainBatches[i])
	}
	log.Print("merging all batches results")

	mergeToSingleMap(allMaps)
	end := time.Now()
	fmt.Println("")
	fmt.Printf("Execution time %v for %s lines", end.Sub(start), Format(int64(mainLineCount)))

}

func mergeToSingleMap(allMaps []map[string]stationAggregatedResult) {
	var finalMap = allMaps[0]
	for i, aMap := range allMaps {
		if i > 0 {
			for k, v := range aMap {
				val, entryFound := finalMap[k]
				if entryFound {
					updateResult(&val, v)
				} else {
					val = stationAggregatedResult{v.max, v.min, v.sum, 1}
				}
				finalMap[k] = val
			}
		}
	}
	mapSize := len(finalMap)
	var output strings.Builder
	output.WriteString("{")
	cnt := 1
	for stationName, aggResult := range finalMap {
		output.WriteString(stationName)
		output.WriteString("=")
		output.WriteString(fmt.Sprintf("%.1f", aggResult.min))
		output.WriteString("/")
		output.WriteString(fmt.Sprintf("%.1f", float64(aggResult.sum/aggResult.count)))
		output.WriteString("/")
		output.WriteString(fmt.Sprintf("%.1f", aggResult.max))
		if cnt < mapSize {
			output.WriteString(", ")
		}
		cnt++
	}
	output.WriteString("}")
	fmt.Print(output.String())
}

func processFileSection(lines []string) map[string]stationAggregatedResult {
	wg := sync.WaitGroup{}
	var finalResult = make(chan map[string]stationAggregatedResult)

	lineCount := len(lines)

	cpuCount := runtime.NumCPU()
	batchSize := lineCount / cpuCount // 40_000
	log.Printf("processing %s lines using %s as batch size given %d CPUs\n", Format(int64(lineCount)), Format(int64(batchSize)), cpuCount)
	batches := make([][]string, 0, (len(lines)+batchSize-1)/batchSize)

	for batchSize < len(lines) {
		lines, batches = lines[batchSize:], append(batches, lines[0:batchSize:batchSize])
	}
	batches = append(batches, lines)
	aggregationResults = make(chan map[string]stationAggregatedResult, len(batches)+1)

	wg.Add(len(batches) - 1)
	for _, batch := range batches {
		go processLineString(batch, &wg)
	}

	wg.Wait()

	wg.Add(1)
	go func() map[string]stationAggregatedResult {
		defer wg.Done()
		for {
			select {
			case c1 := <-aggregationResults:
				if len(aggregationResults) > 0 {
					c2 := <-aggregationResults
					//fmt.Println("aggregating")
					for k, v := range c1 {
						val, entryFound := c2[k]
						if entryFound {
							updateResult(&val, v)
						} else {
							val = stationAggregatedResult{v.max, v.min, v.sum, 1}
						}
						c2[k] = val
					}
					aggregationResults <- c2
				} else {
					fmt.Println("final")
					finalResult <- c1
				}
			}
		}
	}()
	wg.Wait()
	return <-finalResult
}

func insertEntryInBatch(c2 map[string]stationAggregatedResult, station string, measurement int8) {
	val, ok := c2[station]
	if ok {
		updateResultInBatch(&val, measurement)
	} else {
		val = stationAggregatedResult{measurement, measurement, int64(measurement), 1}
	}
	c2[station] = val
}

func processLineString(lineBatch []string, localWG *sync.WaitGroup) {
	defer localWG.Done()
	var batchAggResult = make(map[string]stationAggregatedResult)

	for _, line := range lineBatch {
		measurement, station := getStationAndValue(line)
		insertEntryInBatch(batchAggResult, station, measurement)
	}

	aggregationResults <- batchAggResult
}

func getStationAndValue(line string) (int8, string) {
	var measurement int8
	semiColonIdx := getSemiColonIndex(line)
	var station = line[0:semiColonIdx]
	var negativeNumber = false
	// tlv;9.2 idx=3
	station = line[0:semiColonIdx]

	if line[semiColonIdx+1] == 45 { // "-"
		negativeNumber = true
	}

	measurement = getMeasurement(line, negativeNumber, measurement, semiColonIdx)

	return measurement, station
}

func getSemiColonIndex(line string) int {
	sLen := len(line)
	var startIdx = 0
	if sLen > 5 {
		startIdx = sLen - 6
	}
	for i := startIdx; i < sLen; i++ {
		if line[i] == 59 {
			return i
		}
	}
	return -1
}

func getMeasurement(line string, negativeNumber bool, measurement int8, semiColonIdx int) int8 {
	numberCharCount := len(line) - 1 - semiColonIdx
	// number options
	// negative 4		5
	//			-1.7	-11.7
	//			3		4
	// positive 1.7		11.7
	// vv;1.0

	if negativeNumber {
		if numberCharCount == 4 {
			measurement = int8(line[semiColonIdx+2] - 48)
		} else {
			measurement = int8((line[semiColonIdx+2]-48)*10 + line[semiColonIdx+3] - 48)
		}
		measurement *= -1
	} else {
		if numberCharCount == 3 {
			measurement = int8(line[semiColonIdx+1] - 48)
		} else {
			measurement = int8((line[semiColonIdx+1]-48)*10 + line[semiColonIdx+2] - 48)
		}
		measurement += 1
	}
	return measurement
}

func roundFloat(val float64, precision uint) float64 {
	ratio := math.Pow(10, float64(precision))
	return math.Round(val*ratio) / ratio
}

func updateResult(val *stationAggregatedResult, entry stationAggregatedResult) {
	val.min = intMin(val.min, entry.min)
	val.max = intMax(val.max, entry.max)
	val.sum += entry.sum
	val.count += entry.count
}

func updateResultInBatch(val *stationAggregatedResult, measurement int8) {
	val.min = intMin(val.min, measurement)
	val.max = intMax(val.max, measurement)
	val.sum += int64(measurement)
	val.count += 1
}

func intMin(currentMin int8, measurement int8) int8 {
	if currentMin < measurement {
		return currentMin
	}

	return measurement
}

func intMax(currentMax int8, measurement int8) int8 {
	if currentMax > measurement {
		return currentMax
	}

	return measurement
}

func Format(n int64) string {
	in := strconv.FormatInt(n, 10)
	numOfDigits := len(in)
	if n < 0 {
		numOfDigits-- // First character is the - sign (not a digit)
	}
	numOfCommas := (numOfDigits - 1) / 3

	out := make([]byte, len(in)+numOfCommas)
	if n < 0 {
		in, out[0] = in[1:], '-'
	}

	for i, j, k := len(in)-1, len(out)-1, 0; ; i, j = i-1, j-1 {
		out[j] = in[i]
		if i == 0 {
			return string(out)
		}
		if k++; k == 3 {
			j, k = j-1, 0
			out[j] = ','
		}
	}
}
