package main

import (
	"fmt"
	"log"
	"math"
	"os"
	"runtime"
	"strconv"
	"strings"
	"sync"
	"time"
)

type stationAggregatedResult struct {
	min   float64
	max   float64
	sum   float64
	count float64
}

// var bufferChan chan string
// var processedLines chan processedLine
var aggregationResults chan map[string]stationAggregatedResult

func main() {
	bigMap := make([]map[string]stationAggregatedResult, 10)
	start := time.Now()
	for i := 0; i < 10; i++ {
		processFile()
	}
	end := time.Now()
	fmt.Println("")
	fmt.Printf("Execution time %v for %d lines\n", end.Sub(start), 100_000_000)
}

func processFile() {
	wg := sync.WaitGroup{}
	//wg.Add(1)
	//start := time.Now()

	//bufferChan = make(chan string, 100000000)
	//processedLines = make(chan processedLine, 1_000_000)
	var finalResult = make(chan int)

	content, err := os.ReadFile("./measurements.txt")
	if err != nil {
		log.Print("Error opening measurements file, failing ðŸ˜µ")
	}

	lines := strings.Split(string(content), "\n")
	lineCount := len(lines)
	//wg.Add(1)

	cpuCount := runtime.NumCPU()
	batchSize := lineCount / cpuCount // 40_000
	log.Printf("Using %d as batch size given %d CPUs\n", batchSize, cpuCount)
	batches := make([][]string, 0, (len(lines)+batchSize-1)/batchSize)

	for batchSize < len(lines) {
		lines, batches = lines[batchSize:], append(batches, lines[0:batchSize:batchSize])
	}
	batches = append(batches, lines)
	aggregationResults = make(chan map[string]stationAggregatedResult, len(batches)+1)

	wg.Add(len(batches) - 1)
	for _, batch := range batches {
		go processLineString(batch, &wg)
	}
	//wg.Done()
	wg.Wait()

	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case c1 := <-aggregationResults:
				if len(aggregationResults) > 0 {
					c2 := <-aggregationResults
					//fmt.Println("aggregating")
					for k, v := range c1 {
						val, entryFound := c2[k]
						if entryFound {
							updateResult(&val, v)
						} else {
							val = stationAggregatedResult{v.max, v.min, v.sum, 1}
						}
						c2[k] = val
					}
					aggregationResults <- c2
				} else {
					fmt.Println("final")
					var output strings.Builder
					output.WriteString("{")
					cnt := 1
					for stationName, aggResult := range c1 {
						output.WriteString(stationName)
						output.WriteString("=")
						output.WriteString(fmt.Sprintf("%.1f", aggResult.min))
						output.WriteString("/")
						output.WriteString(fmt.Sprintf("%.1f", aggResult.sum/aggResult.count))
						output.WriteString("/")
						output.WriteString(fmt.Sprintf("%.1f", aggResult.max))
						if cnt < len(c1) {
							output.WriteString(", ")
						}
						cnt++
					}
					output.WriteString("}")
					fmt.Print(output.String())
					//end := time.Now()
					//fmt.Println("")
					//fmt.Printf("Execution time %v for %d lines\n", end.Sub(start), lineCount)
					finalResult <- 1
				}
			}
		}
	}()

	//wg.Done()
	wg.Wait()

	a := <-finalResult
	if a == 1 {
		fmt.Println("finished")
	}

	//end := time.Now()
	//fmt.Println("")
	//fmt.Printf("Execution time %v for %d lines\n", end.Sub(start), lineCount)
}

func insertEntryInBatch(c2 map[string]stationAggregatedResult, station string, measurement float64) {
	val, ok := c2[station]
	if ok {
		updateResultInBatch(&val, measurement)
	} else {
		val = stationAggregatedResult{measurement, measurement, measurement, 1}
	}
	c2[station] = val
}

func processLineString(lineBatch []string, localWG *sync.WaitGroup) {
	defer localWG.Done()
	var batchAggResult = make(map[string]stationAggregatedResult)

	for _, line := range lineBatch {
		lineParts := strings.Split(line, ";")

		if len(lineParts) > 1 {
			//log.Print(lineParts)
			measurement, err1 := strconv.ParseFloat(lineParts[1], 64)
			if err1 != nil {
				log.Print(err1)
			}
			measurement = roundFloat(measurement, 1)
			//fmt.Println(measurement)

			if err1 != nil {
				log.Fatal(err1)
			}
			station := lineParts[0]

			insertEntryInBatch(batchAggResult, station, measurement)
		}
	}

	aggregationResults <- batchAggResult
}

func roundFloat(val float64, precision uint) float64 {
	ratio := math.Pow(10, float64(precision))
	return math.Round(val*ratio) / ratio
}

func updateResult(val *stationAggregatedResult, entry stationAggregatedResult) {
	val.min = intMin(val.min, entry.min)
	val.max = intMax(val.max, entry.max)
	val.sum += entry.sum
	val.count += entry.count
}

func updateResultInBatch(val *stationAggregatedResult, measurement float64) {
	val.min = intMin(val.min, measurement)
	val.max = intMax(val.max, measurement)
	val.sum += measurement
	val.count += 1
}

func intMin(currentMin float64, measurement float64) float64 {
	if currentMin < measurement {
		return currentMin
	}

	return measurement
}

func intMax(currentMax float64, measurement float64) float64 {
	if currentMax > measurement {
		return currentMax
	}

	return measurement
}
